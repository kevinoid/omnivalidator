<?xml version="1.0"?>
<!--
    XBL bindings for our modified console box

    This file is part of the Omnivalidator extension.
    It is licensed under the terms of the MIT License.
    The complete text of the license is available in the project documentation.

    Copyright 2012 Kevin Locke <kevin@kevinlocke.name>
-->
<bindings id="validationConsoleBindings"
        xmlns="http://www.mozilla.org/xbl"
        xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        xmlns:xbl="http://www.mozilla.org/xbl">
    <binding id="validation-console-box"
            extends="chrome://global/content/consoleBindings.xml#console-box">
        <implementation>
            <!-- Override appendConsoleRow to insert before any status rows -->
            <method name="appendConsoleRow">
                <parameter name="row"/>
                <body><![CDATA[
                    var statusRow;

                    statusRow = this.mConsoleRowBox.lastChild;
                    while (statusRow &&
                            statusRow.getAttribute("type") === "status") {
                        statusRow = statusRow.previousSibling;
                    }

                    if (statusRow === null) {
                        // No non-status rows, insert at the front
                        this.mConsoleRowBox.insertBefore(
                            row,
                            this.mConsoleRowBox.firstChild
                        );
                    } else {
                        // Insert after last non-status row
                        this.mConsoleRowBox.insertBefore(
                            row,
                            statusRow.nextSibling
                        );
                    }

                    if (++this.mCount > this.limit) {
                        this.deleteFirst();
                    }
                ]]></body>
            </method>

            <method name="removeStatus">
                <parameter name="key"/>
                <body><![CDATA[
                    var id, row;

                    id = this.getAttribute("id") + "-status-" + key;
                    row = document.getElementById(id);

                    if (row) {
                        row.parentNode.removeChild(row);
                    }
                ]]></body>
            </method>

            <method name="setStatus">
                <parameter name="key"/>
                <parameter name="message"/>
                <body><![CDATA[
                    var id, newRow, oldRow;

                    id = this.getAttribute("id") + "-status-" + key;

                    newRow = this.createConsoleRow();
                    newRow.setAttribute("id", id);
                    newRow.setAttribute("type", "status");
                    newRow.setAttribute("msg", message);

                    oldRow = document.getElementById(id);
                    if (oldRow) {
                        oldRow.parentNode.replaceChild(newRow, oldRow);
                    } else {
                        this.appendConsoleRow(newRow);
                    }
                ]]></body>
            </method>

            <constructor><![CDATA[
                /* The consoleBindings.xml#console-box constructor connects
                 * to the message service to receive console messages in its
                 * constructor.  This constructor is run after, so we
                 * disconnect and clear any messages which were delivered
                 * immediately.
                 */
                // FIXME:  Is there a way to prevent initial registration?
                this.mCService.unregisterListener(this.mConsoleListener);
                this.clearConsole();

                /* The console must have an id (which we use as a namespace
                 * for status row ids.  If it does not have one, generate one.
                 */
                if (!this.getAttribute("id")) {
                    this.setAttribute(
                        "id",
                        "consolebox" + Math.random().toFixed(10).slice(2)
                    );
                }
            ]]></constructor>

            <destructor><![CDATA[
                // Re-register the listener so that the consoleBox destructor
                // can unregister it without throwing
                this.mCService.registerListener(this.mConsoleListener);
            ]]></destructor>
        </implementation>
    </binding>
</bindings>
<!-- vi: set sts=4 sw=4 et : -->
